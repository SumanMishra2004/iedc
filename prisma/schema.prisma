generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// ─────────────────────────────────────────────────────────────
// ENUMS
// ─────────────────────────────────────────────────────────────

enum UserType {
  STUDENT
  FACULTY
  ADMIN
}

enum PaperStatus {
  UPLOAD
  ON_REVIEW
  PUBLISH
  REJECTED
  DELETE
}

enum AdvisorAcceptanceStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REQUEST_CLARIFICATION
}

enum NotificationType {
  GENERAL
  PAPER_UPLOADED
  PAPER_UPDATED
  PAPER_REJECTED
  PAPER_PUBLISHED
  PAPER_DELETED
  REVIEW_ASSIGNED
  REVIEW_COMPLETED
  ADVISOR_REQUEST
  ADVISOR_ACCEPTED
  ADVISOR_REJECTED
  PAPER_UNDER_REVIEW_STATUS_CHANGE
}

// ─────────────────────────────────────────────────────────────
// MODELS
// ─────────────────────────────────────────────────────────────

model User {
  id                     String      @id @default(uuid())
  name                   String
  email                  String      @unique
  password               String?
  degree                 String?
  year                   Int?
  department             String?
  university             String?
  subjectArea            String?
  position               String?
  profileImage           String?
  resetToken             String?     @unique
  resetTokenExpiry       DateTime?
  isVerified             Boolean     @default(false)
  userType               UserType    @default(STUDENT)
  verificationCode       String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  performedReviews       Review[]
  assignedAdvisorPapers  PaperAdvisor[]  @relation("AssignedAdvisor")
  notificationsReceived  Notification[]  @relation("RecipientNotifications")
  reviewedPapers         ResearchPaper[] @relation("PaperReviewer", fields: [], references: [])
  paperContributions     PaperAuthorContribution[]
}

model UserDetails {
  id       String   @id @default(uuid())
  email    String   @unique
  userType UserType
}

model LatestNews {
  id                 String   @id @default(uuid())
  title              String
  content            String
  createdAt          DateTime @default(now())
  tags               String[]
  homePageVisibility Boolean  @default(false)
}

model ResearchPaper {
  id              String        @id @default(uuid())
  title           String
  abstract        String
  filePath        String
  currentVersion  Int           @default(1)
  authorsInfo     Json          @default("[]") // fallback for frontend display
  reviewerId      String
  reviewer        User          @relation("PaperReviewer", fields: [reviewerId], references: [id])
  status          PaperStatus   @default(UPLOAD)
  keywords        String[]
  submissionDate  DateTime      @default(now())
  lastUpdated     DateTime      @updatedAt
  rejectionRemark String?
  rejectionDate   DateTime?

  facultyAdvisors PaperAdvisor[]
  reviews         Review[]
  notifications   Notification[]
  contributors    PaperAuthorContribution[]
}

model PaperAdvisor {
  id                  String                  @id @default(uuid())
  paperId             String
  advisorId           String
  paper               ResearchPaper           @relation(fields: [paperId], references: [id] ,onDelete: Cascade)
  advisor             User                    @relation("AssignedAdvisor", fields: [advisorId], references: [id])
  acceptanceStatus    AdvisorAcceptanceStatus @default(PENDING)
  assignedDate        DateTime                @default(now())
  decisionDate        DateTime?
  // remark           String? // Uncomment if needed
}

model Review {
  id          String       @id @default(uuid())
  rating      Int?
  comment     String
  status      ReviewStatus
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reviewerId  String
  paperId     String

  reviewer    User         @relation(fields: [reviewerId], references: [id])
  paper       ResearchPaper @relation(fields: [paperId], references: [id])
}

model Notification {
  id           String           @id @default(uuid())
  message      String
  type         NotificationType @default(GENERAL)
  isRead       Boolean          @default(false)
  createdAt    DateTime         @default(now())
  recipientId  String
  paperId      String?

  recipient    User             @relation("RecipientNotifications", fields: [recipientId], references: [id])
  paper        ResearchPaper?   @relation(fields: [paperId], references: [id])
}

// ─────────────────────────────────────────────────────────────
// New Join Table: PaperAuthorContribution
// ─────────────────────────────────────────────────────────────

model PaperAuthorContribution {
  id            String         @id @default(uuid())
  paperId       String
  userId        String
  contribution  String         // E.g., "Abstract", "Methodology", etc.

  paper         ResearchPaper  @relation(fields: [paperId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
}
